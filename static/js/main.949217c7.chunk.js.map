{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","lonCoord","longitude","toLowerCase","latCoord","latitude","className","main","temp","list","name","id","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","sys","country","arg","hours","getHours","minutes","getMinutes","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.949217c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nconst api = {\n  key: '0786e0b6c72797557c728a976f5c0ebd',\n  base: 'https://api.openweathermap.org/data/2.5/'\n\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = event => {\n    if (event.key === 'Enter') {\n\n      // let latCoord = query => {\n      //   let latitude = '';\n      //   let Query = query.toLowerCase();\n\n      //   switch (Query) {\n      //     case 'lagos':\n      //       latitude = '6.58';\n      //       break;\n      //     case 'abuja':\n      //       latitude = '9.06';\n      //       break;\n      //     default:\n      //       latitude = '9.08';\n      //       break;\n      //   }\n\n      //   return latitude;\n      // }\n\n      // let lonCoord = query => {\n      //   let longitude = '';\n      //   let Query = query.toLowerCase();\n\n      //   switch (Query) {\n      //     case 'lagos':\n      //       longitude = '3.76';\n      //       break;\n      //     case 'abuja':\n      //       longitude = '7.49';\n      //       break;\n      //     default:\n      //       longitude = '8.68';\n      //       break;\n      //   }\n\n      //   return longitude;\n      // }\n\n      // fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n\n\n      fetch(`${api.base}weather?lat=${latCoord(query)}&lon=${lonCoord(query)}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n    }\n  }\n\n  let lonCoord = query => {\n    let longitude = '';\n    let Query = query.toLowerCase();\n\n    switch (Query) {\n      case 'lagos':\n        longitude = '3.76';\n        break;\n      case 'abuja':\n        longitude = '7.49';\n        break;\n      // case 'abia':\n      //   longitude = '7.49';\n      //   break;\n      default:\n        longitude = '8.68';\n        break;\n    }\n\n    return longitude;\n  }\n\n  let latCoord = query => {\n    let latitude = '';\n    let Query = query.toLowerCase();\n\n    switch (Query) {\n      case 'lagos':\n        latitude = '6.58';\n        break;\n      case 'abuja':\n        latitude = '9.06';\n        break;\n      // case 'abia':\n      //   latitude = '5.53';\n      //   break;\n      default:\n        latitude = '9.08';\n        break;\n    }\n\n    return latitude;\n  }\n\n  const dateBuilder = (arg) => {\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    let hours = arg.getHours();\n    let minutes = arg.getMinutes();\n    let day = days[arg.getDay()];\n    let date = arg.getDate();\n    let month = months[arg.getMonth()];\n    let year = arg.getFullYear();\n\n    return `${hours}:${minutes}  ${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={(typeof weather.main != 'undefined')? \n    (weather.main.temp >= 35 && weather.main.temp < 40 ? 'app clear' : weather.main.temp >= 40 ? 'app very-hot' : weather.main.temp < 30 ? 'app rain' : 'app cloudy') : 'app'}>\n      {/* // <div className={typeof weather.main != 'undefined' ? 'app rain': 'app'}> */}\n      <main className={(typeof weather.main != 'undefined') ? (weather.main.temp < 30 ? 'main rain' : 'main') : 'main'}>\n        <div className='title'>Weather in Nigeria Now</div>\n        <div className='search-box'>\n\n          {/* <input type='text' className='search-bar' placeholder='Search for a State...' onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}/> */}\n\n          <input list=\"states\" name=\"state\" id=\"state\" className='search-bar' placeholder='Search for a State...' onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}/>\n          <datalist id=\"states\" className='datalist'>\n            <option value=\"Abia\"/>\n            <option value='Abuja'/>\n            <option value=\"Adamawa\"/>\n            <option value='Akwa Ibom'/>\n            <option value='Anambra'/>\n            <option value=\"Bauchi\"/>\n            <option value=\"Bayelsa\"/>\n            <option value='Benue'/>\n            <option value='Borno'/>\n            <option value=\"Cross River\"/>\n            <option value=\"Delta\"/>\n            <option value='Ebonyi'/>\n            <option value='Edo'/>\n            <option value=\"Ekiti\"/>\n            <option value=\"Enugu\"/>\n            <option value='Gombe'/>\n            <option value='Jigawa'/>\n            <option value=\"Kaduna\"/>\n            <option value=\"Kano\"/>\n            <option value='Katsina'/>\n            <option value='Kebbi'/>\n            <option value=\"Kogi\"/>\n            <option value=\"Kwara\"/>\n            <option value='Lagos'/>\n            <option value='Nasarawa'/>\n            <option value=\"Niger\"/>\n            <option value=\"Ogun\"/>\n            <option value='Ondo'/>\n            <option value='Osun'/>\n            <option value=\"Oyo\"/>\n            <option value=\"Plateau\"/>\n            <option value='Rivers'/>\n            <option value='Sokoto'/>\n            <option value=\"Taraba\"/>\n            <option value=\"Yobe\"/>\n            <option value='Zamfara'/>\n          </datalist>\n\n        </div>\n        {(typeof weather.main != 'undefined') ? (\n          <div>\n            <div className='location-box'>\n              <div className='location'>{weather.name }, {weather.sys.country}</div>\n              <div className='date'>{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className='weather-box'>\n            <div className='temp'>{Math.round(weather.main.temp)}&#8451;</div>\n              {/* <div className='weather'>{weather.weather[0].icon}</div> */}\n            </div>\n          </div>\n        ): ('')}\n      </main>\n      {/* <footer>\n        <div className='footer'>\n          Designed by: <a href='https://mojeedkusimo.github.io/my_portfolio'>Mojeed Kusimo</a><br></br>\n          Powered by: <a href='https://reactjs.org'>ReatJS</a>\n        </div>\n      </footer> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}